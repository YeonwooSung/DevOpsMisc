// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokenTelephoneClient is the client API for BrokenTelephone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokenTelephoneClient interface {
	SaySomething(ctx context.Context, in *BrokenTelephoneRequest, opts ...grpc.CallOption) (*BrokenTelephoneResponse, error)
}

type brokenTelephoneClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokenTelephoneClient(cc grpc.ClientConnInterface) BrokenTelephoneClient {
	return &brokenTelephoneClient{cc}
}

func (c *brokenTelephoneClient) SaySomething(ctx context.Context, in *BrokenTelephoneRequest, opts ...grpc.CallOption) (*BrokenTelephoneResponse, error) {
	out := new(BrokenTelephoneResponse)
	err := c.cc.Invoke(ctx, "/BrokenTelephone/SaySomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokenTelephoneServer is the server API for BrokenTelephone service.
// All implementations must embed UnimplementedBrokenTelephoneServer
// for forward compatibility
type BrokenTelephoneServer interface {
	SaySomething(context.Context, *BrokenTelephoneRequest) (*BrokenTelephoneResponse, error)
	mustEmbedUnimplementedBrokenTelephoneServer()
}

// UnimplementedBrokenTelephoneServer must be embedded to have forward compatible implementations.
type UnimplementedBrokenTelephoneServer struct {
}

func (UnimplementedBrokenTelephoneServer) SaySomething(context.Context, *BrokenTelephoneRequest) (*BrokenTelephoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaySomething not implemented")
}
func (UnimplementedBrokenTelephoneServer) mustEmbedUnimplementedBrokenTelephoneServer() {}

// UnsafeBrokenTelephoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokenTelephoneServer will
// result in compilation errors.
type UnsafeBrokenTelephoneServer interface {
	mustEmbedUnimplementedBrokenTelephoneServer()
}

func RegisterBrokenTelephoneServer(s grpc.ServiceRegistrar, srv BrokenTelephoneServer) {
	s.RegisterService(&BrokenTelephone_ServiceDesc, srv)
}

func _BrokenTelephone_SaySomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokenTelephoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokenTelephoneServer).SaySomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokenTelephone/SaySomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokenTelephoneServer).SaySomething(ctx, req.(*BrokenTelephoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokenTelephone_ServiceDesc is the grpc.ServiceDesc for BrokenTelephone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokenTelephone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BrokenTelephone",
	HandlerType: (*BrokenTelephoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaySomething",
			Handler:    _BrokenTelephone_SaySomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brokentelephone.proto",
}
